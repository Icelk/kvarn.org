/* Entire document */

:root {
    text-align: justify;
    font-family: "Cairo", sans-serif;

    --bg-darker: #0f0f0f;
    --bg-dark: #111216;
    --bg-light: #181b21;
    --bg-lighter: #272c38;

    --text-normal: #fffffa;
    --text-color: #a2c6d8;

    --transition-speed: 0.2s;
    --bar-height: 3rem;
}

a,
p,
div,
span {
    line-height: 1.3em;
}

body {
    color: var(--text-normal);
    margin: 0;

    background: linear-gradient(to right, var(--bg-dark), var(--bg-darker));
    /* So the scrollbar track gets the right color */
    background-color: var(--bg-darker);
    --bg-head: linear-gradient(to right, var(--bg-lighter), var(--bg-light));

    overflow-x: hidden;
}

p {
    margin: 0.75em;
}

/* Scrollbar */

body::-webkit-scrollbar {
    width: 0.4rem;
}

body::-webkit-scrollbar-track {
    background: none;
}

body::-webkit-scrollbar-thumb {
    background: var(--bg-lighter);
}

/* General overrides */

h1,
h2,
h3,
h4,
h5,
h6,
md table {
    font-family: "Kurale", serif;
    font-weight: 400;
    line-height: 1em;
    margin-bottom: 0;
}
a:link {
    color: var(--text-color);
}
a:visited {
    color: var(--text-color);
}
a > * {
    text-decoration-line: underline;
}

/* Top navigation bar */
#top-bar {
    display: flex;
    flex-direction: row;
    justify-content: center;

    font-family: "Kurale", serif;
    font-size: 1.3rem;
    letter-spacing: 0.05rem;

    background: var(--bg-head);

    /* So we can make it fixed if we want to */
    position: relative;
}
#top-bar > .container {
    display: flex;
    flex-wrap: wrap;
}
#top-bar > .container.l {
    justify-content: flex-end;
}
#top-bar > .container.r {
    justify-content: flex-start;
}
/* All links in top bar */
#top-bar .item {
    /* width: 6rem; */
    padding: 0 0.8em;
}
#top-bar .item,
#top-bar .middle {
    color: inherit !important;
    text-decoration: none;
    transition: filter ease-out var(--transition-speed);

    display: flex;
    margin: 0 2px;
    line-height: var(--bar-height);
    align-items: center;
}
#top-bar .middle {
    padding: 0 0.4em;
    align-items: start;
}

/* Dim item while hovering */
#top-bar .item:hover,
#top-bar .middle:hover {
    filter: opacity(0.7);
}

/* Change background when page is the one shown */
#top-bar .item.visiting {
    background-color: var(--bg-lighter);
    filter: brightness(1.1);
}
#top-bar .middle img {
    height: var(--bar-height);
    transition: height calc(var(--transition-speed) * 0.75) cubic-bezier(0.4, 0, 0.2, 1) /* bounce: */
        /* cubic-bezier(0.18, 0.89, 0.32, 1.28) */;
}
#top-bar .middle:hover img {
    height: calc(var(--bar-height) * 2);
}

/* If dropdown is hovered or has focus, show dropdown! */
#top-bar .has-dropdown:hover .dropdown,
#top-bar .has-dropdown:focus-within .dropdown {
    opacity: 1;
    pointer-events: auto;
}

/* Dropdown in top bar */
#top-bar .dropdown {
    width: max-content;
    max-width: 40em;
    position: absolute;
    z-index: 99;
    pointer-events: none;

    opacity: 0;
    transition: opacity var(--transition-speed) ease-out;
    border-radius: 0 0 8px 8px;
    border-top: 2px solid var(--text-color);
    box-shadow: 2px 2px 6px var(--bg-lighter);
    background: var(--bg-light);

    display: flex;
    flex-wrap: wrap;
    justify-content: space-around;
    text-align: center;

    transform: translateX(calc(-50% + 2em));
}

@media only screen and (max-width: 40em) {
    #top-bar .dropdown .item {
        float: none;
        display: inline-block;
        flex-grow: 1;
    }
    #top-bar .dropdown {
        left: 0;
        width: 100vw;
        transform: none;
    }
}

/* Other style */
code {
    vertical-align: middle;
    padding: 0.2em 0.4em;
    margin: 0;
    font-size: 85%;
    background-color: var(--bg-lighter);
    border-radius: 6px;

    color: var(--text-color);
}

/* Enable pointers on all elements with href class */
.href {
    cursor: pointer;
}

div.list {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
}

.solid-button,
button.solid {
    --padding: 0.5rem;

    background: linear-gradient(0.35turn, var(--bg-lighter), var(--bg-light));
    padding: var(--padding);
    font-size: 1.25rem;
    margin: 0.25rem;

    color: inherit !important;
    text-decoration: none;

    transition: _ calc(var(--transition-speed) / 3) ease-in-out;
    transition-property: transform, filter;

    border: none;
    border-radius: 0.2rem;
}
.solid-button.input {
    position: relative;
}
.solid-button.input input {
    border: none;
    background: transparent;
    padding: var(--padding);

    font-size: 1em;
    font-family: inherit;
    color: inherit;

    outline: none;

    padding: 0;
    margin: 0;

    position: absolute;
    left: 0;
    top: 0;
    padding: var(--padding);

    box-sizing: border-box;
    width: 100%;
    height: 100%;
}
.solid-button.input > .overlay {
    user-select: none;
}
/* If you want to see the overlay when the item is deselected, do nothing.
   If you want the input text to be shown when it's deselected, add the class `hide-overlay-on-input`
   to the .input element. 
   The last option requires newer browsers. */
.solid-button.input.hide-overlay-on-input input:not(:placeholder-shown) ~ .overlay {
    visibility: hidden;
}
.solid-button.input:focus-within > .overlay {
    visibility: hidden;
}
.solid-button.input:not(.hide-overlay-on-input):not(:focus-within) input {
    color: transparent;
}
.solid-button:hover {
    transform: scale(1.05);
}
.solid-button:active,
.solid-button.input:focus-within {
    transform: scale(0.9);
}
.solid-button:active,
.solid-button.input:focus-within,
.solid-button:hover {
    filter: brightness(1.4);
}

.share-button {
    width: 0.75em;
    padding-left: 0.5rem;
    opacity: 0.8;
    transition: opacity ease-out 75ms;
    cursor: pointer;
}
.share-button.pressed {
    opacity: 0.4;
}
.share-button:active {
    opacity: 0.6;
}
